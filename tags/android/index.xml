<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on NERVGEEK</title>
    <link>/tags/android/</link>
    <description>Recent content in Android on NERVGEEK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 04 May 2016 08:40:55 +0000</lastBuildDate>
    
	<atom:link href="/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于安卓中4种启动模式（standard、singleTop、singleTask、singleInstance）的区别</title>
      <link>/2016/05/2016-05-04-e585b3e4ba8ee5ae89e58d93e4b8ad4e7a78de590afe58aa8e6a8a1e5bc8fefbc88standarde38081singletope38081singletaske38081singleinstanceefbc89e79a84e58cba/</link>
      <pubDate>Wed, 04 May 2016 08:40:55 +0000</pubDate>
      
      <guid>/2016/05/2016-05-04-e585b3e4ba8ee5ae89e58d93e4b8ad4e7a78de590afe58aa8e6a8a1e5bc8fefbc88standarde38081singletope38081singletaske38081singleinstanceefbc89e79a84e58cba/</guid>
      <description>1、standard ： 系统的默认模式，一次跳转即会生成一个新的实例。假设有一个activity命名为A1，执行语句： startActivity(new Intent(A1.this, A1.class)); 后A1将跳转到另外</description>
    </item>
    
    <item>
      <title>Activity的singleTop启动模式</title>
      <link>/2016/05/2016-05-04-activitye79a84singletope590afe58aa8e6a8a1e5bc8f/</link>
      <pubDate>Wed, 04 May 2016 08:15:57 +0000</pubDate>
      
      <guid>/2016/05/2016-05-04-activitye79a84singletope590afe58aa8e6a8a1e5bc8f/</guid>
      <description>在AndroidManifest.xml里把android:launchMode=&amp;ldquo;standard&amp;rdquo;改成andro</description>
    </item>
    
    <item>
      <title>Activity的标准启动模式</title>
      <link>/2016/05/2016-05-04-activitye79a84e6a087e58786e590afe58aa8e6a8a1e5bc8f/</link>
      <pubDate>Wed, 04 May 2016 07:43:49 +0000</pubDate>
      
      <guid>/2016/05/2016-05-04-activitye79a84e6a087e58786e590afe58aa8e6a8a1e5bc8f/</guid>
      <description>我们安卓程序Activity默认的启动方式是标准启动方式，可以在AndroidManifest.xml内配置。 [默认是standard模式，</description>
    </item>
    
    <item>
      <title>在Activity之间使用Intent传值和Bundle传值的区别和方式</title>
      <link>/2016/05/2016-05-04-e59ca8activitye4b98be997b4e4bdbfe794a8intente4bca0e580bce5928cbundlee4bca0e580bce79a84e58cbae588abe5928ce696b9e5bc8f/</link>
      <pubDate>Wed, 04 May 2016 06:48:23 +0000</pubDate>
      
      <guid>/2016/05/2016-05-04-e59ca8activitye4b98be997b4e4bdbfe794a8intente4bca0e580bce5928cbundlee4bca0e580bce79a84e58cbae588abe5928ce696b9e5bc8f/</guid>
      <description>1.Bundle类的作用 Bundle类用作携带数据，它类似于Map，用于存放key-value名值对形式的值。相对于Map，它提供了各种常用</description>
    </item>
    
    <item>
      <title>Android获取Activity返回参数</title>
      <link>/2016/05/2016-05-04-androide88eb7e58f96activitye8bf94e59b9ee58f82e695b0/</link>
      <pubDate>Wed, 04 May 2016 06:43:29 +0000</pubDate>
      
      <guid>/2016/05/2016-05-04-androide88eb7e58f96activitye8bf94e59b9ee58f82e695b0/</guid>
      <description>我们可以使用Intent、Bundle给另一个Acvitity传递参数，但是有时候退出另一个Acitivity的时候，也需要给上一级Acti</description>
    </item>
    
    <item>
      <title>Android SDK Manager国内无法下载更新解决办法</title>
      <link>/2016/02/2016-02-18-android-sdk-managere59bbde58685e697a0e6b395e4b88be8bdbde69bb4e696b0e8a7a3e586b3e58a9ee6b395/</link>
      <pubDate>Thu, 18 Feb 2016 05:22:40 +0000</pubDate>
      
      <guid>/2016/02/2016-02-18-android-sdk-managere59bbde58685e697a0e6b395e4b88be8bdbde69bb4e696b0e8a7a3e586b3e58a9ee6b395/</guid>
      <description>![G`4%4W]3@Y3A6S4{54K$WX 点击 Tools -&amp;gt; **Options ，在HTTP Proxy Server和HTTP Proxy Port填写下面服务器信息。 ** Android SDK 在线更新镜像服务器资源： 大连东软信息学院镜像服务器地址:</description>
    </item>
    
    <item>
      <title>Java中序列化Serializable的作用</title>
      <link>/2016/02/2016-02-15-javae4b8ade5ba8fe58897e58c96serializablee79a84e4bd9ce794a8/</link>
      <pubDate>Mon, 15 Feb 2016 13:59:30 +0000</pubDate>
      
      <guid>/2016/02/2016-02-15-javae4b8ade5ba8fe58897e58c96serializablee79a84e4bd9ce794a8/</guid>
      <description>序列化是什么： 序列化就是将一个对象的状态（各个属性量）保存起来，然后在适当的时候再获得。 序列化分为两大部分：序列化和反序列化。 序列化是这个过</description>
    </item>
    
    <item>
      <title>Android Studio 离线升级教程</title>
      <link>/2016/02/2016-02-13-android-studio-e7a6bbe7babfe58d87e7baa7e69599e7a88b/</link>
      <pubDate>Sat, 13 Feb 2016 15:52:20 +0000</pubDate>
      
      <guid>/2016/02/2016-02-13-android-studio-e7a6bbe7babfe58d87e7baa7e69599e7a88b/</guid>
      <description>Android Studio 2.0已经出到Perview 9了，对于喜欢尝鲜的我立马就考虑升级了。但由于国内GTW的原因，自带的升级往往不能使用，所以还是非常推荐离线</description>
    </item>
    
    <item>
      <title>Android中使用Bundle传递数据包</title>
      <link>/2016/02/2016-02-13-androide4b8ade4bdbfe794a8bundlee4bca0e98092e695b0e68daee58c85/</link>
      <pubDate>Sat, 13 Feb 2016 08:44:52 +0000</pubDate>
      
      <guid>/2016/02/2016-02-13-androide4b8ade4bdbfe794a8bundlee4bca0e98092e695b0e68daee58c85/</guid>
      <description>在不同的Activity中传递参数除了可以使用Intent以外，还可以使用Bundle来传递。相比起Intent，使用Bundle提高了复用</description>
    </item>
    
    <item>
      <title>Android中的在不同Activity中传递参数</title>
      <link>/2016/02/2016-02-12-androide4b8ade79a84e59ca8e4b88de5908cactivitye4b8ade4bca0e98092e58f82e695b0/</link>
      <pubDate>Fri, 12 Feb 2016 12:53:20 +0000</pubDate>
      
      <guid>/2016/02/2016-02-12-androide4b8ade79a84e59ca8e4b88de5908cactivitye4b8ade4bca0e98092e58f82e695b0/</guid>
      <description>日常跳转Activity的时候，新的Activity经常会用到上一个Activity的数据，在安卓中可以使用Intent提供的方法传递各种参</description>
    </item>
    
    <item>
      <title>Android中的Activity生命周期</title>
      <link>/2016/02/2016-02-01-androide4b8ade79a84activitye7949fe591bde591a8e69c9f/</link>
      <pubDate>Mon, 01 Feb 2016 12:08:25 +0000</pubDate>
      
      <guid>/2016/02/2016-02-01-androide4b8ade79a84activitye7949fe591bde591a8e69c9f/</guid>
      <description>先放一张图了解一下Activity的生命周期： 先占个位，生命周期图找日详细写一写。 本人英语渣，粗略翻译。 上图可知，Activity有七个函数</description>
    </item>
    
    <item>
      <title>Android-使用帮助文档</title>
      <link>/2016/01/android-help-document/</link>
      <pubDate>Sat, 30 Jan 2016 08:26:25 +0000</pubDate>
      
      <guid>/2016/01/android-help-document/</guid>
      <description>1 . 打开SDK Manager，找到Documentation for Android SDK： 2 . 打开SDK下载文件夹，API网页路径为docs/referenc</description>
    </item>
    
  </channel>
</rss>