<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泛型 on NERVGEEK</title>
    <link>/tags/%E6%B3%9B%E5%9E%8B/</link>
    <description>Recent content in 泛型 on NERVGEEK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 Mar 2016 08:17:24 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E6%B3%9B%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java之泛型中的通配符（）以及泛型限定</title>
      <link>/2016/03/2016-03-01-javae4b98be6b39be59e8be4b8ade79a84e9809ae9858de7aca6efbc88efbc89e4bba5e58f8ae6b39be59e8be99990e5ae9a/</link>
      <pubDate>Tue, 01 Mar 2016 08:17:24 +0000</pubDate>
      
      <guid>/2016/03/2016-03-01-javae4b98be6b39be59e8be4b8ade79a84e9809ae9858de7aca6efbc88efbc89e4bba5e58f8ae6b39be59e8be99990e5ae9a/</guid>
      <description>问号通配符 Java的泛型中除了常用的T t之外，还有另一种通配符——&amp;lt;?&amp;gt;，问号通配符和T t通配符并没有非常大的区别，唯一的区别就</description>
    </item>
    
    <item>
      <title>Java之在接口中使用泛型</title>
      <link>/2016/03/2016-03-01-javae4b98be59ca8e68ea5e58fa3e4b8ade4bdbfe794a8e6b39be59e8b/</link>
      <pubDate>Tue, 01 Mar 2016 07:24:52 +0000</pubDate>
      
      <guid>/2016/03/2016-03-01-javae4b98be59ca8e68ea5e58fa3e4b8ade4bdbfe794a8e6b39be59e8b/</guid>
      <description>在接口上使用泛型并不多见，但还是需要学会看懂。 interface Inter&amp;lt;t&amp;gt;{ void show(T t); } class Intermpl&amp;lt;t&amp;gt; implements Inter&amp;lt;t&amp;gt;{ public void show(T t){ System.out.println(t); } } class Demo{ public static void main(String[] args){ Intermpl&amp;lt;string&amp;gt; imS = new Intermpl&amp;lt;string&amp;gt;(); imS.show(&amp;quot;a&amp;quot;); Intermpl&amp;lt;integer&amp;gt; imI = new Intermpl&amp;lt;integer&amp;gt;(); imI.show(123); } }</description>
    </item>
    
    <item>
      <title>Java之在方法中使用泛型</title>
      <link>/2016/02/2016-02-25-javae4b98be59ca8e696b9e6b395e4b8ade4bdbfe794a8e6b39be59e8b/</link>
      <pubDate>Thu, 25 Feb 2016 11:20:29 +0000</pubDate>
      
      <guid>/2016/02/2016-02-25-javae4b98be59ca8e696b9e6b395e4b8ade4bdbfe794a8e6b39be59e8b/</guid>
      <description>在上一篇文章中，我们定义了泛型类，让类可以接受多种类型的输入： class Tools&amp;lt;SomeThing&amp;gt;{ private SomeThing st; public void setSomeThing(SomeThing st){ this.st = st; } public SomeThing getSomeThing(){ return st; } } 但有时候类并不是所有方法都适合传入的类</description>
    </item>
    
    <item>
      <title>Java之在自定义类中使用泛型</title>
      <link>/2016/02/2016-02-25-javae4b98be59ca8e887aae5ae9ae4b989e7b1bbe4b8ade4bdbfe794a8e6b39be59e8b/</link>
      <pubDate>Thu, 25 Feb 2016 09:23:12 +0000</pubDate>
      
      <guid>/2016/02/2016-02-25-javae4b98be59ca8e887aae5ae9ae4b989e7b1bbe4b8ade4bdbfe794a8e6b39be59e8b/</guid>
      <description>集合可以使用泛型来指定基本数据类型，但集合也是一个类，意味着我们自己的自定义类也能使用泛型。 假如有以下这样的代码： class Dog{ } class Cat{ } class Tools{ private Dog d; private Cat</description>
    </item>
    
    <item>
      <title>Java中的泛型概念</title>
      <link>/2016/02/2016-02-25-javae4b8ade79a84e6b39be59e8be6a682e5bfb5/</link>
      <pubDate>Thu, 25 Feb 2016 05:21:19 +0000</pubDate>
      
      <guid>/2016/02/2016-02-25-javae4b8ade79a84e6b39be59e8be6a682e5bfb5/</guid>
      <description>泛型是Java在JDK 1.5的时候推出的一个新特性，主要解决了集合中类型转换错误的问题，例如有下面的一组代码： ArrayList al = new ArrayList(); al.add(&amp;quot;123&amp;quot;); al.add(4); Iterator it = al.iterator(); while(it.hasNext()){ String s =</description>
    </item>
    
  </channel>
</rss>