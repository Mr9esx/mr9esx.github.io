<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>关键字 on NERVGEEK</title>
    <link>/tags/%E5%85%B3%E9%94%AE%E5%AD%97/</link>
    <description>Recent content in 关键字 on NERVGEEK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Jan 2016 16:16:05 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E5%85%B3%E9%94%AE%E5%AD%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java中的throws关键字</title>
      <link>/2016/01/2016-01-28-javae4b8ade79a84throwse585b3e994aee5ad97/</link>
      <pubDate>Thu, 28 Jan 2016 16:16:05 +0000</pubDate>
      
      <guid>/2016/01/2016-01-28-javae4b8ade79a84throwse585b3e994aee5ad97/</guid>
      <description>1 . throws可以在定义一个方法的时候声明，使用throws声明之后的方法将异常抛给调用者处理，方法本身不会处理。 代码示例： class ExceptionDemo01 { public static void main(String[]</description>
    </item>
    
    <item>
      <title>Java中的接口以及接口和抽象类的区别</title>
      <link>/2016/01/2016-01-24-javae4b8ade79a84e68ea5e58fa3/</link>
      <pubDate>Sun, 24 Jan 2016 08:50:34 +0000</pubDate>
      
      <guid>/2016/01/2016-01-24-javae4b8ade79a84e68ea5e58fa3/</guid>
      <description>1 . 接口可以理解成一个特殊的类，其组成全都是全局常量以及公共的抽象方法所组成。 2 . 使用interface关键字来修饰。 3 . 接口必须经过子类来</description>
    </item>
    
    <item>
      <title>Java中的抽象类</title>
      <link>/2016/01/2016-01-23-javae4b8ade79a84e68abde8b1a1e7b1bb/</link>
      <pubDate>Sat, 23 Jan 2016 09:16:42 +0000</pubDate>
      
      <guid>/2016/01/2016-01-23-javae4b8ade79a84e68abde8b1a1e7b1bb/</guid>
      <description>1 . 一个类之中包含了抽象方法，该类就是抽象类。 2 . 抽象方法即是：被声明却未被实现并使用abstract关键字修饰的方法。 3 . 不能对抽象类直接</description>
    </item>
    
    <item>
      <title>Java中的final关键字</title>
      <link>/2016/01/2016-01-23-javae4b8ade79a84finale585b3e994aee5ad97/</link>
      <pubDate>Sat, 23 Jan 2016 08:11:16 +0000</pubDate>
      
      <guid>/2016/01/2016-01-23-javae4b8ade79a84finale585b3e994aee5ad97/</guid>
      <description>1 . final可译为完结器，意译为最终。 2 . final可修饰类、方法、属性。 final修饰之后的类不能被继承。 final修饰之后的方法不能被</description>
    </item>
    
  </channel>
</rss>